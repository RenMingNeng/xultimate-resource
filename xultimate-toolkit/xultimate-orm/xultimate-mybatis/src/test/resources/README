一. MapperScannerConfigurer
1.MapperScannerConfigurer实现了BeanDefinitionRegistryPostProcessor，因此当Spring将所有的Bean解析成GenericBeanDefinition并添加到DefaultListableBeanFactory中的beanDefinitionMap以后会执行postProcessBeanDefinitionRegistry方法。
2.创建ClassPathMapperScanner，设置annotationClass、sqlSessionTemplateBeanName后调用其scan方法，将分割后的basePackage作为方法参数。
3.scan方法内部主要通过调用doScan完成，参数不变。
4.通过调用父类的doScan方法获取所有满足条件的BeanDefinitionHolder集。
5.遍历BeanDefinitionHolder集，获取每一个GenericBeanDefinition。
	将beanClass替换为MapperFactoryBean。
	将其原有beanClass的名字设置给属性mapperInterface，并将此关系添加到属性列表中。
	如果ClassPathMapperScanner的sqlSessionTemplateBeanName成员变量有值，将创建一个RuntimeBeanReference属性sqlSessionTemplate，并将此关系添加到属性列表中。
	如果sqlSessionTemplateBeanName、sqlSessionTemplate、sqlSessionFactoryBeanName、sqlSessionFactory都不存在，则设置当前的GenericBeanDefinition内部的属性注入方式为自动按类型。

二. MapperFactoryBean
1.MapperFactoryBean实现了FactoryBean接口，用于返回一个类型为mapperInterface的实例。checkDaoConfig方法会在设置完属性后被afterPropertiesSet调用。
2.checkDaoConfig内部判断类型mapperInterface在Configuration的mapperRegistry中是否存在，不存在就通过mapperRegistry的addMapper方法添加进去。Configuration是通过前面传递的sqlSessionTemplate获取的。
3.getObject方法内部调用sqlSessionTemplate的getMapper方法，参数为mapperInterface。

三.SqlSessionTemplate
1.getMapper方法内部通过调用其Configuration的getMapper方法，参数为mapperInterface和this。

四.Configuration
1.getMapper方法内部通过调用mapperRegistry成员变量的getMapper方法，参数为mapperInterface和sqlSessionTemplate。

五.MapperRegistry
注：二部分mapperRegistry的addMapper方法内部首先会判断mapperInterface是否接口，然后创建一个MapperProxyFactory类型的实例，构造参数为mapperInterface，将mapperInterface和MapperProxyFactory作为键值放入knownMappers映射集中。
1.根据mapperInterface从knownMappers中获取对应的MapperProxyFactory实例，调用其newInstance方法，方法参数为sqlSessionTemplate实例。

六.MapperProxyFactory
1.newInstance方法内部通过其成员变量mapperInterface(实例化时的构造参数)、methodCache(并发映射集)、sqlSessionTemplate实例化一个MapperProxy实例，该实例实现了JDK动态代理部分的InvocationHandler接口。然后通过Proxy.newProxyInstance方法返回一个代理对象。

七.MapperProxy
1.实现了InvocationHandler接口，包含invoke方法。
2.invoke方法内部首先判断调用的方法是否是Object的，如equals、hashCode、toString。
	如果是，则通过反射调用MapperProxy的对应方法并返回结果。
	如果不是，则通过mapperInterface，method实例，Configuration(通过sqlSessionTemplate获取)创建一个MapperMethod实例，并加入到methodCache中，然后调用MapperMethod实例的execute方法，参数为sqlSessionTemplate和args。
	
八.MapperMethod
1.execute方法内部，主要是通过被调用方法对应的SQL类型(INSERT/UPDATE/DELETE/SELECT)，其中针对SELECT还要判断返回类型是否是void或者是否是List或者是否是Map等，决定调用sqlSessionTemplate的哪个方法。


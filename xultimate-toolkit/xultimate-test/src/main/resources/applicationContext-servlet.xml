<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 自动扫描org.danielli.xultimate.controller 包下的@Controller标注的类控制器类 -->
	<context:component-scan base-package="org.danielli.xultimate.test.web.controller">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean id="marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller" p:packagesToScan="org.danielli.xultimate" />
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	<mvc:annotation-driven conversion-service="conversionService" content-negotiation-manager="contentNegotiationManager" validator="validator">
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
			<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			<bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter" />
        	<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter" c:marshaller-ref="marshaller" />
        	<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="org.danielli.xultimate.test.web.converter.UserConverter" />
			</set>
		</property>
	</bean>
	
	<!-- 设置本地化 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver" c:locale="zh_CN" />
	<!-- 
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" p:cookieName="locale" p:cookieMaxAge="31536000" p:cookiePath="/" p:defaultLocale="zh_CN" />
	<bena id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver" />
	 -->
	
	<!-- 装配拦截器 -->
	<mvc:interceptors>
		<!-- <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="locale" /> -->
		<bean class="org.danielli.xultimate.web.servlet.i18n.RequestContextInterceptor" />
		<!-- 
		<mvc:interceptor>
			<mvc:mapping path="/secure/*"/>
			<bean class="org.Security" />
		</mvc:interceptor>
		 -->
	</mvc:interceptors>
	
	<!-- 内容协作视图解析器，用于XML，JSON -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean" p:defaultContentType="text/html" p:ignoreAcceptHeader="false" p:favorPathExtension="false" p:favorParameter="true" p:parameterName="content">
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="xml" value="application/xml" />
				<entry key="json" value="application/json" />
			</map>
		</property>
	</bean>
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" p:order="1" p:contentNegotiationManager-ref="contentNegotiationManager" >
		<property name="defaultViews">
			<list>
				<bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView" p:renderedAttributes="result" />
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView" p:marshaller-ref="marshaller" p:modelKey="result" />
			</list>
		</property>
	</bean>
	<!-- HTTL视图解析器 -->
	<bean class="org.danielli.xultimate.web.servlet.view.httl.HttlViewResolver" p:order="80" p:contentType="text/html; charset=utf8" p:suffix=".httl">
		<property name="httlProperties">
			<value>
				import.packages+=org.danielli.xultimate.test.vo
				template.directory=/WEB-INF/template/httl,/WEB-INF/template/error
				input.encoding=UTF-8
				output.encoding=UTF-8
			</value>
		</property>
	</bean>
	<!-- Velocity视图解析器 
	<bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer" p:resourceLoaderPath="/WEB-INF/template/velocity/">
		<property name="velocityProperties">
			<value>
				file.resource.loader.cache=false
				input.encoding=UTF-8
				output.encoding=UTF-8
			</value>
		</property>	
	</bean>
	<bean class="org.springframework.web.servlet.view.velocity.VelocityViewResolver" p:order="80" p:contentType="text/html; charset=utf8" p:suffix=".vm" />
	 -->
	<!-- Freemarker视图解析器 
	<bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer" p:templateLoaderPath="/WEB-INF/template/freemarker/">
		<property name="freemarkerSettings">
			<value>

			</value>
		</property>
	</bean>
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver" p:order="80" p:contentType="text/html; charset=utf8" p:suffix=".ftl" />
	 -->
	<!-- Jasper Report视图解析器
	<bean class="org.springframework.web.servlet.view.jasperreports.JasperReportsViewResolver" p:viewClass="org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatView" p:order="90" p:prefix="/WEB-INF/template/jasperreports" p:suffix=".jasper" />
	 -->
	<!-- BeanName视图解析器，用于PDF，EXCEL -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="100" />
	
	<!-- 处理静态资源：对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转同Web应用服务器默认的Servlet处理，否则由Dispatcher继续处理。
	<mvc:default-servlet-handler default-servlet-name="default"/>
	-->
	<!-- 处理静态资源：通过Spring MVC自己处理静态资源，并添加一些有用的除加值功能。如客户端缓存。通过在视图中使用版本标签访问静态资源 -->
	<mvc:resources mapping="/resources/**" location="/resources/" cache-period="31536000" />
	<!-- 
		匹配过程由AntPathMatcher.match(String pattern, String path)方法完成。
		
		?表示一个字符
		*表示0个或多个字符
		**表示0个或多个path中的目录
		
		如/a.html会匹配**/*.html
		如/a/a.html会匹配**/*.html
		如/a/a/a.html会匹配**/*.html
	 -->
	<mvc:resources mapping="**/*.html" location="/" cache-period="0" />
	<!-- 不需要写Controller
	<mvc:view-controller path="/test" view-name="test"/>
	 -->

	<!-- 文件上传解析 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" p:defaultEncoding="utf-8" />
	
	<!-- 异常处理 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:order="0" p:exceptionAttribute="exception" p:defaultErrorView="error" >
		<property name="exceptionMappings">
			<value>
				ServletException=error
				# 404	SC_NOT_FOUND
				NoSuchRequestHandlingMethodException=error
				# 405	SC_METHOD_NOT_ALLOWED
				HttpRequestMethodNotSupportedException=error
				# 415	SC_UNSUPPORTED_MEDIA_TYPE
				HttpMediaTypeNotSupportedException=error
				# 406	SC_NOT_ACCEPTABLE
				HttpMediaTypeNotAcceptableException=error
				# 400	SC_INTERNAL_SERVER_ERROR
				MissingServletRequestParameterException=error
				# 400	SC_INTERNAL_SERVER_ERROR
				ServletRequestBindingException=error
				# 500	SC_INTERNAL_SERVER_ERROR
				ConversionNotSupportedException=error
				# 400	SC_BAD_REQUEST
				TypeMismatchException=error
				# 400	SC_BAD_REQUEST
				HttpMessageNotReadableException=error
				# 500	SC_INTERNAL_SERVER_ERROR
				HttpMessageNotWritableException=error
				# 400	SC_BAD_REQUEST
				MethodArgumentNotValidException=error
				# 400	SC_BAD_REQUEST
				MissingServletRequestPartException=error
				# 400	SC_BAD_REQUEST
				BindException=error
				# error页面内部通过exception获取对应的状态码，然后通过国际化显示具体的文字
			</value>
		</property>	
	</bean>
</beans>
